// <auto-generated />
using InventoryDBWPFCore.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryDBWPFCore.EntityFramework.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.ComputerDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ComputerMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerTagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerVirtual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("HardDriveId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HardDriveId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RAMId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.EmployeeDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployeeDutyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.HardDriveDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("HardDriveLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardDriveManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardDriveSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardDriveType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HardDrives");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.MonitorDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MonitorMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitorModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitorSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitorSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitorTagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.OperatingSystemDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("OperatingSystemManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystemVersion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.PrinterDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PrinterCartridgeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterColorBlackWhite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterTagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.ProcessorDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProcessorMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.RamDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RamMaxCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RamSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RamSlots")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RAM");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.ServerDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("HardDriveId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.Property<string>("ServerMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerTagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerVirtual")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HardDriveId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RAMId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.UserDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.ComputerDB", b =>
                {
                    b.HasOne("InventoryDBWPFCore.Domain.Models.EmployeeDB", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.HardDriveDB", "HardDrive")
                        .WithMany()
                        .HasForeignKey("HardDriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.OperatingSystemDB", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.ProcessorDB", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.RamDB", "Ram")
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("HardDrive");

                    b.Navigation("OperatingSystem");

                    b.Navigation("Processor");

                    b.Navigation("Ram");
                });

            modelBuilder.Entity("InventoryDBWPFCore.Domain.Models.ServerDB", b =>
                {
                    b.HasOne("InventoryDBWPFCore.Domain.Models.HardDriveDB", "HardDrive")
                        .WithMany()
                        .HasForeignKey("HardDriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.OperatingSystemDB", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.ProcessorDB", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDBWPFCore.Domain.Models.RamDB", "Ram")
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HardDrive");

                    b.Navigation("OperatingSystem");

                    b.Navigation("Processor");

                    b.Navigation("Ram");
                });
#pragma warning restore 612, 618
        }
    }
}
